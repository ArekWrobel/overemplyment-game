export const EVENT_CARDS = [
  { id: 'deploy', title: 'Nagły Deploy', description: 'Wszystkie zadania w tej turze kosztują +1 PA (punkt akcji).', apply: (state) => { state.modifiers.apCost += 1; state.log.push('Nagły Deploy: +1 koszt PA w tej turze.'); } },
  { id: 'laptop_fail', title: 'Laptop uległ awarii', description: 'Tracisz jedną turę i +1 stres.', apply: (state) => { state.skipTurn = true; state.stress = Math.min(100, state.stress + 1); state.log.push('Awaria laptopa: tracisz następną turę.'); } },
  { id: 'less_meetings', title: 'Redukcja calli', description: 'Dostajesz +2 dodatkowe PA w tej turze.', apply: (state) => { state.actionsLeft += 2; state.log.push('Redukcja calli: +2 PA.'); } },
  { id: 'double_oncall', title: 'Dyżur w dwóch projektach jednocześnie', description: 'Rzut d6: 4+ sukces. Porażka: +2 ryzyka wykrycia.', apply: (state) => { const roll = Math.floor(Math.random()*6)+1; if (roll >= 4) state.log.push('Sukces dyżuru!'); else { state.detectionRisk = Math.min(100, state.detectionRisk + 2); state.log.push('Porażka dyżuru: +2 ryzyka.'); } } },
  { id: 'hr_audit', title: 'Nagły audyt HR', description: 'Test wykrycia: jeśli los < ryzyko%, tracisz losowy projekt i 10$', apply: (state) => { const chance = Math.random() * 100; if (chance < state.detectionRisk && state.projects.length) { const idx = Math.floor(Math.random() * state.projects.length); const lost = state.projects.splice(idx, 1)[0]; state.money = Math.max(0, state.money - 10); state.log.push(`Audyt HR: utracono projekt "${lost.name}" i 10$.`); } else { state.log.push('Audyt HR: brak konsekwencji.'); } } },
  { id: 'new_client', title: 'Nowy klient', description: 'Na planszy pojawia się nowy projekt.', apply: (state) => { state.pendingNewProject = true; state.log.push('Nowy klient: dodaj projekt.'); } },
  { id: 'bonus', title: 'Premia za jakość', description: '+15$ natychmiast.', apply: (state) => { state.money += 15; state.log.push('Premia: +15$.'); } },
  { id: 'slack_leak', title: 'Wyciek na Slacku', description: '+3 ryzyka wykrycia.', apply: (state) => { state.detectionRisk = Math.min(100, state.detectionRisk + 3); state.log.push('Wyciek na Slacku: +3 ryzyka.'); } },
  { id: 'genius_commit', title: 'Genialny commit', description: 'Jeden losowy projekt otrzymuje -2 do pozostałych zadań.', apply: (state) => { if (!state.projects.length) return; const i = Math.floor(Math.random() * state.projects.length); state.projects[i].tasksRemaining = Math.max(0, state.projects[i].tasksRemaining - 2); state.log.push(`Genialny commit: postęp w "${state.projects[i].name}".`); } },
  { id: 'ai_help', title: 'AI agent pomógł', description: 'Zakończ jedno zadanie w losowym projekcie (DevOps/AI +1 zadanie).', apply: (state) => { if (!state.projects.length) return; const i = Math.floor(Math.random() * state.projects.length); let delta = 1; if (state.role.startsWith('DevOps')) delta = 2; state.projects[i].tasksRemaining = Math.max(0, state.projects[i].tasksRemaining - delta); state.log.push(`AI pomógł: -${delta} zadań w "${state.projects[i].name}".`); } },
  { id: 'nitro_coffee', title: 'Nitro Cold Brew', description: 'Kofeinowy boost: +1 PA i -1 stres.', apply: (state) => { state.actionsLeft += 1; state.stress = Math.max(0, state.stress - 1); state.log.push('Nitro: +1 PA, -1 stres.'); } },
  { id: 'meeting_canceled', title: 'Odwołane daily', description: 'Masz chwilę spokoju: -1 ryzyka wykrycia.', apply: (state) => { state.detectionRisk = Math.max(0, state.detectionRisk - 1); state.log.push('Odwołane daily: -1 ryzyka.'); } },
  { id: 'shadow_it', title: 'Shadow IT', description: 'Szybki hack przyspiesza pracę: w tej turze pierwsza akcja kosztuje 0 PA.', apply: (state) => { state.modifiers.apCost = Math.max(0, (state.modifiers.apCost||0) - 1); state.log.push('Shadow IT: pierwsza akcja praktycznie za darmo.'); } },
  { id: 'freelancer_help', title: 'Freelancer do pomocy', description: 'Zapłać 5$ i usuń 2 zadania z losowego projektu.', apply: (state) => { if (!state.projects.length) return; state.money = Math.max(0, state.money - 5); const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining = Math.max(0, state.projects[i].tasksRemaining - 2); state.log.push(`Freelancer: -2 zadania w "${state.projects[i].name}", -5$.`); } },
  { id: 'prod_bug', title: 'Bug na produkcji', description: '+2 ryzyka wykrycia i +1 stres.', apply: (state) => { state.detectionRisk = Math.min(100, state.detectionRisk + 2); state.stress = Math.min(100, state.stress + 1); state.log.push('Bug na produkcji: +2 ryzyka, +1 stres.'); } },
  { id: 'tech_talk', title: 'Tech Talk w firmie', description: '-2 stresu, +1 ryzyka (większa widoczność).', apply: (state) => { state.stress = Math.max(0, state.stress - 2); state.detectionRisk = Math.min(100, state.detectionRisk + 1); state.log.push('Tech Talk: -2 stres, +1 ryzyka.'); } },
  { id: 'green_tests', title: 'Wszystkie testy na zielono', description: 'Motywacja rośnie: -1 zadanie w każdym projekcie backendowym.', apply: (state) => { state.projects.forEach(p => { if (p.type === 'Backend') p.tasksRemaining = Math.max(0, p.tasksRemaining - 1); }); state.log.push('Green tests: -1 zadanie w backendach.'); } },
  { id: 'ux_review', title: 'Pozytywny UX review', description: 'Frontendówki: -1 zadanie w każdym projekcie frontendowym.', apply: (state) => { state.projects.forEach(p => { if (p.type === 'Frontend') p.tasksRemaining = Math.max(0, p.tasksRemaining - 1); }); state.log.push('UX review: -1 zadanie w frontendach.'); } },
  { id: 'vpn_drop', title: 'VPN padł', description: 'Nie zrobisz wiele: -1 PA w tej turze.', apply: (state) => { state.actionsLeft = Math.max(0, state.actionsLeft - 1); state.log.push('VPN padł: -1 PA.'); } },
  { id: 'silent_mode', title: 'Tryb „Nie przeszkadzać”', description: 'Skupienie: -1 stres i -1 ryzyka wykrycia.', apply: (state) => { state.stress = Math.max(0, state.stress - 1); state.detectionRisk = Math.max(0, state.detectionRisk - 1); state.log.push('DND: -1 stres, -1 ryzyka.'); } },
  { id: 'pair_programming', title: 'Pair programming', description: 'Wspólne programowanie: jedna wybrana akcja kosztuje 0 PA (obniż apCost o 1).', apply: (state) => { state.modifiers.apCost = Math.max(0, (state.modifiers.apCost||0) - 1); state.log.push('Pair programming: jedna akcja taniej.'); } },
  { id: 'scope_creep', title: 'Scope creep', description: 'Losowy projekt dostaje +2 zadania.', apply: (state) => { if (!state.projects.length) return; const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining += 2; state.log.push(`Scope creep: +2 zadania w "${state.projects[i].name}".`); } },
  { id: 'accidental_cc', title: 'Przypadkowe CC do złego zespołu', description: '+2 ryzyka wykrycia.', apply: (state) => { state.detectionRisk = Math.min(100, state.detectionRisk + 2); state.log.push('Złe CC: +2 ryzyka.'); } },
  { id: 'weekend_push', title: 'Weekendowy push', description: 'Dodatkowa praca: +2 PA, ale +1 stres.', apply: (state) => { state.actionsLeft += 2; state.stress = Math.min(100, state.stress + 1); state.log.push('Weekendowy push: +2 PA, +1 stres.'); } },
  { id: 'security_patch', title: 'Patch bezpieczeństwa', description: 'Zmniejsz ryzyko wykrycia o 2.', apply: (state) => { state.detectionRisk = Math.max(0, state.detectionRisk - 2); state.log.push('Patch security: -2 ryzyka.'); } },
  { id: 'merge_conflict', title: 'Konflikt merge', description: 'Marnujesz czas: -1 PA i +1 stres.', apply: (state) => { state.actionsLeft = Math.max(0, state.actionsLeft - 1); state.stress = Math.min(100, state.stress + 1); state.log.push('Konflikt merge: -1 PA, +1 stres.'); } },
  { id: 'standup_magic', title: 'Stand-up jak z bajki', description: 'Zespół zmotywowany: -1 zadanie w losowym projekcie.', apply: (state) => { if (!state.projects.length) return; const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining = Math.max(0, state.projects[i].tasksRemaining - 1); state.log.push(`Stand-up: -1 zadanie w "${state.projects[i].name}".`); } },
  { id: 'dirty_hotfix', title: 'Brudny hotfix', description: 'Ukończ 1 zadanie, ale +1 ryzyka wykrycia.', apply: (state) => { if (!state.projects.length) { state.detectionRisk = Math.min(100, state.detectionRisk + 1); return; } const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining = Math.max(0, state.projects[i].tasksRemaining - 1); state.detectionRisk = Math.min(100, state.detectionRisk + 1); state.log.push('Hotfix: -1 zadanie, +1 ryzyka.'); } },
  { id: 'refactor_day', title: 'Dzień refaktoryzacji', description: '-1 zadanie w każdym projekcie Fullstack.', apply: (state) => { state.projects.forEach(p => { if (p.type === 'Fullstack') p.tasksRemaining = Math.max(0, p.tasksRemaining - 1); }); state.log.push('Refaktoryzacja: -1 zadanie w fullstackach.'); } },
  { id: 'automation_script', title: 'Skrypt automatyzacji', description: 'DevOps/AI: -2 ryzyka; inni: -1 ryzyka.', apply: (state) => { const delta = state.role.startsWith('DevOps') ? 2 : 1; state.detectionRisk = Math.max(0, state.detectionRisk - delta); state.log.push(`Automatyzacja: -${delta} ryzyka.`); } },
  { id: 'task_split', title: 'Podział zadania', description: 'Wybrane zadanie było zbyt duże: +1 zadanie do losowego projektu.', apply: (state) => { if (!state.projects.length) return; const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining += 1; state.log.push(`Podział zadania: +1 w "${state.projects[i].name}".`); } },
  { id: 'mentor_session', title: 'Sesja mentorskia', description: '-2 stresu.', apply: (state) => { state.stress = Math.max(0, state.stress - 2); state.log.push('Mentoring: -2 stresu.'); } },
  { id: 'billing_error', title: 'Błąd w fakturowaniu', description: '-10$ i +1 stres.', apply: (state) => { state.money = Math.max(0, state.money - 10); state.stress = Math.min(100, state.stress + 1); state.log.push('Błąd faktury: -10$, +1 stres.'); } },
  { id: 'customer_praise', title: 'Pochwała od klienta', description: '+10$ i -1 stres.', apply: (state) => { state.money += 10; state.stress = Math.max(0, state.stress - 1); state.log.push('Pochwała: +10$, -1 stres.'); } },
  { id: 'code_review_marathon', title: 'Maraton code review', description: 'Pierwsza akcja w tej turze kosztuje +1 PA.', apply: (state) => { state.modifiers.apCost += 1; state.log.push('Maraton CR: +1 koszt PA tej tury.'); } },
  { id: 'context_switch', title: 'Ciągły context switch', description: '+1 stres i -1 PA.', apply: (state) => { state.stress = Math.min(100, state.stress + 1); state.actionsLeft = Math.max(0, state.actionsLeft - 1); state.log.push('Context switch: +1 stres, -1 PA.'); } },
  { id: 'silent_release', title: 'Cichy release', description: 'Bez fajerwerków, ale skutecznie: -1 zadanie w losowym projekcie.', apply: (state) => { if (!state.projects.length) return; const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining = Math.max(0, state.projects[i].tasksRemaining - 1); state.log.push('Cichy release: -1 zadanie gdzieś w tle.'); } },
  { id: 'sso_issue', title: 'Problem z SSO', description: 'Tracisz następną akcję (ustaw apCost na bardzo wysoki jednorazowo).', apply: (state) => { state.modifiers.apCost += 99; state.log.push('SSO: następna akcja praktycznie zablokowana.'); } },
  { id: 'calendar_wizardry', title: 'Magia kalendarza', description: 'Przesuwasz spotkania: +1 PA i -1 ryzyka.', apply: (state) => { state.actionsLeft += 1; state.detectionRisk = Math.max(0, state.detectionRisk - 1); state.log.push('Magia kalendarza: +1 PA, -1 ryzyka.'); } },
  { id: 'bad_estimate', title: 'Złe oszacowanie', description: 'Losowy projekt +2 zadania, +1 stres.', apply: (state) => { if (state.projects.length) { const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining += 2; } state.stress = Math.min(100, state.stress + 1); state.log.push('Złe oszacowanie: +2 zadania gdzieś i +1 stres.'); } },
  { id: 'qa_blocker', title: 'Bloker w QA', description: 'Brak postępu: -1 PA i +1 ryzyka (szum).', apply: (state) => { state.actionsLeft = Math.max(0, state.actionsLeft - 1); state.detectionRisk = Math.min(100, state.detectionRisk + 1); state.log.push('QA bloker: -1 PA, +1 ryzyka.'); } },
  { id: 'doc_as_code', title: 'Docs as Code', description: 'Lepsza dokumentacja: -1 stres i +1 PA.', apply: (state) => { state.stress = Math.max(0, state.stress - 1); state.actionsLeft += 1; state.log.push('Docs as Code: -1 stres, +1 PA.'); } },
  { id: 'random_prod_access', title: 'Dostęp do produkcji przydzielony omyłkowo', description: 'Kuszące, ale ryzykowne: +3 ryzyka wykrycia.', apply: (state) => { state.detectionRisk = Math.min(100, state.detectionRisk + 3); state.log.push('Zbędny prod-access: +3 ryzyka.'); } },
  { id: 'design_system', title: 'Design System wdrożony', description: 'Frontend: globalne przyspieszenie, -1 zadanie w 2 losowych projektach.', apply: (state) => { const picks = Math.min(2, state.projects.length); for (let n=0;n<picks;n++){ const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining = Math.max(0, state.projects[i].tasksRemaining - 1); } state.log.push('Design System: -1 zadanie w 2 projektach.'); } },
  { id: 'db_migration', title: 'Migracja bazy danych', description: 'Ciężki temat: +1 stres i +1 apCost w tej turze.', apply: (state) => { state.stress = Math.min(100, state.stress + 1); state.modifiers.apCost += 1; state.log.push('Migracja DB: +1 stres, +1 koszt PA.'); } },
  { id: 'observability', title: 'Lepsza obserwowalność', description: 'Szybciej łapiesz błędy: -2 stresu.', apply: (state) => { state.stress = Math.max(0, state.stress - 2); state.log.push('Observability: -2 stresu.'); } },
  { id: 'redundant_meetings', title: 'Zbędne spotkania', description: 'Tracisz fokus: -2 PA.', apply: (state) => { state.actionsLeft = Math.max(0, state.actionsLeft - 2); state.log.push('Zbędne spotkania: -2 PA.'); } },
  { id: 'hire_junior', title: 'Zatrudnienie juniora', description: 'Na start kosztuje czas: -1 PA, ale -1 stres (odciążenie).', apply: (state) => { state.actionsLeft = Math.max(0, state.actionsLeft - 1); state.stress = Math.max(0, state.stress - 1); state.log.push('Junior: -1 PA, -1 stres.'); } },
  { id: 'ai_code_review', title: 'AI code review', description: 'Automatyczne uwagi: -1 zadanie w projekcie o największej liczbie zadań.', apply: (state) => { if (!state.projects.length) return; let idx = 0, max = -1; state.projects.forEach((p,i)=>{ if (p.tasksRemaining>max){ max=p.tasksRemaining; idx=i; } }); state.projects[idx].tasksRemaining = Math.max(0, state.projects[idx].tasksRemaining - 1); state.log.push(`AI CR: -1 zadanie w "${state.projects[idx].name}".`); } },
  { id: 'overconfident_commit', title: 'Zbyt pewny commit', description: 'Wygląda dobrze, ale… +1 ryzyka i +1 stres.', apply: (state) => { state.detectionRisk = Math.min(100, state.detectionRisk + 1); state.stress = Math.min(100, state.stress + 1); state.log.push('Overconfident commit: +1 ryzyka, +1 stres.'); } },
  { id: 'lunch_break', title: 'Długi lunch', description: 'Reset głowy: -1 stres, ale -1 PA.', apply: (state) => { state.stress = Math.max(0, state.stress - 1); state.actionsLeft = Math.max(0, state.actionsLeft - 1); state.log.push('Lunch: -1 stres, -1 PA.'); } },
  { id: 'prod_read_only', title: 'Tryb read-only na produkcji', description: 'Bezpieczniej: -1 ryzyka wykrycia.', apply: (state) => { state.detectionRisk = Math.max(0, state.detectionRisk - 1); state.log.push('Read-only: -1 ryzyka.'); } },
  { id: 'chaos_monkey', title: 'Chaos Monkey', description: 'Test odporności: losowy projekt +1 zadanie, ale +10$.', apply: (state) => { state.money += 10; if (state.projects.length){ const i = Math.floor(Math.random()*state.projects.length); state.projects[i].tasksRemaining += 1; } state.log.push('Chaos Monkey: +10$, ale +1 zadanie w projekcie.'); } },
  { id: 'greenfield', title: 'Greenfield', description: 'Nowy projekt z niskim ryzykiem: dodaj projekt i -1 ryzyka.', apply: (state) => { state.pendingNewProject = true; state.detectionRisk = Math.max(0, state.detectionRisk - 1); state.log.push('Greenfield: nowy projekt i -1 ryzyka.'); } },
  { id: 'legacy_trap', title: 'Pułapka legacy', description: 'Stare technologie spowalniają: +1 apCost w tej turze.', apply: (state) => { state.modifiers.apCost += 1; state.log.push('Legacy: +1 koszt PA.'); } },
  { id: 'product_manager_magic', title: 'Magia PM', description: 'Odblokowane wymagania: -2 zadania łącznie rozdzielone po projektach.', apply: (state) => { let left=2; while(left>0 && state.projects.length){ const i = Math.floor(Math.random()*state.projects.length); if (state.projects[i].tasksRemaining>0){ state.projects[i].tasksRemaining -= 1; left -= 1; } else break; } state.log.push('Magia PM: -2 zadania łącznie.'); } },
  { id: 'prod_incident_postmortem', title: 'Postmortem po incydencie', description: 'Lekcje wyciągnięte: -2 ryzyka wykrycia.', apply: (state) => { state.detectionRisk = Math.max(0, state.detectionRisk - 2); state.log.push('Postmortem: -2 ryzyka.'); } },
  { id: 'office_rumors', title: 'Plotki w biurze', description: 'Wieści się niosą: +2 ryzyka i +1 stres.', apply: (state) => { state.detectionRisk = Math.min(100, state.detectionRisk + 2); state.stress = Math.min(100, state.stress + 1); state.log.push('Plotki: +2 ryzyka, +1 stres.'); } },
  { id: 'focus_mode', title: 'Tryb głębokiej pracy', description: 'Flow: +2 PA, -1 stres.', apply: (state) => { state.actionsLeft += 2; state.stress = Math.max(0, state.stress - 1); state.log.push('Deep work: +2 PA, -1 stres.'); } },
  { id: 'security_training', title: 'Szkolenie bezpieczeństwa', description: 'Świadomość rośnie: -1 ryzyka wykrycia.', apply: (state) => { state.detectionRisk = Math.max(0, state.detectionRisk - 1); state.log.push('Szkolenie: -1 ryzyka.'); } },
  { id: 'late_fee', title: 'Opłata za spóźnienie', description: 'Kara finansowa: -5$.', apply: (state) => { state.money = Math.max(0, state.money - 5); state.log.push('Kara: -5$.'); } }
];
